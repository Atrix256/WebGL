TODO:

? re-read "how to write a research paper" link
 * http://research.microsoft.com/en-us/um/people/simonpj/papers/giving-a-talk/writing-a-paper-slides.pdf

* read other papers from http://jcgt.org/ to get an idea of the average published paper

* come up with a layout of the paper with the topics

? do i need a 1x16 curve bake out in the demos to compare my technique to maybe? find out if that's what rick is doing!

* show rick details when you have perf info.
* another journal if needed: http://tog.acm.org/



===========REFERENCES===========
* distance textures were shown at siggraph 2007
? possibly related and reference-able
 * http://research.microsoft.com/en-us/um/people/cloop/loopblinn05.pdf
 * http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf

* read these... possibly related and maybe reference-able?
 * http://research.microsoft.com/en-us/um/people/cloop/loopblinn05.pdf   <--- similar but different. uses bilinear texture coordinate interpolation.
 * http://http.developer.nvidia.com/GPUGems3/gpugems3_ch25.html
 * http://commaexcess.com/articles/6/vector-graphics-on-the-gpu

* some references here:
 * http://algorithmist.net/docs/subdivision.pdf

===========FUTURE WORK===========

? does this have application to bsplines/nurbs? hermite? others?
? how about 3d surfaces instead of only 2d curves? bezier triangles (pascals pyramid) or rectangular bezier patches.
? other uses in 2d vector graphics or in 3d?
? can we do different weighting besides u==v to get higher order curves?  like get a cubic curve where B==C, so it has 3 control points but is cubic?

=========================================BRAINSTORM=========================================

Things we want to cover, in no particular order:
* 1d texture case as an explanation?
* 2d texture case
* 3d texture case
* talk about mixing de casteljeau's algorithm with bernstein form
* explicitly show how bilinear interpolation can be mathematically equivelant to bernstein form.
* talk about size of textures needed with each case of texture dimensions
* mention that quadrilinear (and beyond) has further improvements.  show the formula for # of taps per dimension going up etc.
* hw bilinear / hw linear & sw linear/ sw bilinear / also read control points (3 instead of 4!)-> quality differences and how floating point RGBA textures didn't seem to help
* mention perf at all?
* mention usage cases: specular maps, particle color etc (no more "single value" but parametric values).  parameterizable by many things: viewing angle, time, etc.  also can be color gradients.
* talk about combining R,G,B,A for fewer, higher order curves if desired. smoother curves for less texture reads too!
* mention rotationally encoding curves?
* talk about using anti aliasing to help jaggies?
* mention that curves could be animated -> lerp between two curves over time = same as lerping between control points.
* rational curves. mention 3 rational curves if they share the A, else 2 rational curves if they each want their own weights.
 * limitation: can only use weighting up to 1.0 for etxture formats that want normalized colors. or you can normalize after multiplication (shrink curve)
* not ideal for vector graphics because this is just good for getting curve point at time t, and not having knowledge of control points.
 * decent for 1d curves, or polar rendered curves, but limited use cases for those.
 * can also do affine transformations to curve point out, or control points before they go in texture.  same result either way.  translation, rotation, scaling (uniform and not), shearing, paralel projection, etc.  not central projection (perspective projection)
* end to end curves
* benefits of end to end curves vs a higher degree curve
 * less computation to evaluate
 * can have discontinuities (dont share tangents) if desired (sometimes desired, more flexibility)
 * technically, could also make it not even share control points!
 * higher degree curves = more texture sampels needed.  End to end curves = fewer.

=========================================PRIORITIES=========================================

----------------------Important----------------------
* 2d texture case
* 3d texture case
* talk about mixing de casteljeau's algorithm with bernstein form
* explicitly show how bilinear interpolation can be mathematically equivelant to bernstein form.
* talk about size of textures needed with each case of texture dimensions
* mention that quadrilinear (and beyond) has further improvements.  show the formula for # of taps per dimension going up etc.
* hw bilinear / hw linear & sw linear/ sw bilinear / also read control points (3 instead of 4!)-> quality differences and how floating point RGBA textures didn't seem to help
* mention usage cases: specular maps, particle color etc (no more "single value" but parametric values).  parameterizable by many things: viewing angle, time, etc.  also can be color gradients.
* talk about combining R,G,B,A for fewer, higher order curves if desired. smoother curves for less texture reads too!
* mention rotationally encoding curves?
* rational curves. mention 3 rational curves if they share the A, else 2 rational curves if they each want their own weights.
 * limitation: can only use weighting up to 1.0 for etxture formats that want normalized colors. or you can normalize after multiplication (shrink curve)
* not ideal for vector graphics because this is just good for getting curve point at time t, and not having knowledge of control points.
 * decent for 1d curves, or polar rendered curves, but limited use cases for those.
 * can also do affine transformations to curve point out, or control points before they go in texture.  same result either way.  translation, rotation, scaling (uniform and not), shearing, paralel projection, etc.  not central projection (perspective projection)
* end to end curves
* benefits of end to end curves vs a higher degree curve
 * less computation to evaluate
 * can have discontinuities (dont share tangents) if desired (sometimes desired, more flexibility)
 * technically, could also make it not even share control points!
 * higher degree curves = more texture sampels needed.  End to end curves = fewer.

----------------------Not as important----------------------
* 1d texture case as an explanation?
* mention perf at all?
* talk about using anti aliasing to help jaggies?
* mention that curves could be animated -> lerp between two curves over time = same as lerping between control points.





























