Next:
  * N-cubic curves end to end
 * Higher order curve via more lerps & equation
 * equation only quadratic curve N-points (3 pixels per curve.  maybe loop the curve to show that trick?)
 * make control points into circles via "discard".
 * OpenGL after webgl cleaned up? 

! need to do perf analasys between methods somehow! (might need to wait til OpenGL C++ version)

* do 2d curve rendering for quadratic bezier curves
 * http://blog.gludion.com/2009/08/distance-to-quadratic-bezier-curve.html?m=1

* reinvestigate turning vsync off inc hrome

* higher order curve version w/ lots of lerps (or higher order math)
* N control points version
* C++ opengl versions -> make sure cubic curve uses volume textures!

* make either N control points or a fixed amount, with curves being set up end to end.
* do a version with volume textures, which does cubvic bezier curves
* maybe some way to have higher order curves by doing multiple texture lookups and manual lerping?
* blog post! Or paper...
* tell rick when done, or have enough to show
* make some version that lets you compare speed of this vs other ways

* multiple curves end to end
 * each 2x2 adds 2 more control points.
 * A B C D
 * B C D E
 * 0->1 is A->B->C
 * 1->2 is C->D->E
 * dimension of texture is 2*numcurves wide, 2 pixels high.

 * compare to 1x16 curve bake out lerp version (and any other methods you can find?)

* diff the html demos and make them as close as possible
* make sure all spaces, no tabs, in all demo files

=== perf ===

compare speed vs sending control points in a constant buffer.  also vs hard coded control points.

=== all web curve demos ===

* normCoord.x, not sample, in: float h = sample > 0.5 ? -0.01 : 0.01;

* don't show control points in "texture" render view

* i think the finite difference implementation might be wrong, check it out by simulating it in shadertoy or something
 * make h be based on resolution or something
* smoothstep distance should use screen resolution or something. or make it "true" antialiasing somehow? read that one paper about aa of procedular shapes

 =====Paper Notes=====
* doing manual lerp, you only need 1 pixel per control point.
 * can do this pattern with vertical texture repeat on to make a looping curve!

A B
D C
E F
H G

A->B->C
C->D->E
E->F->G
G->H->A

! compare quality to doing 1x16

? is bilinear sampling "free" (need citation)
? what's the cost of 3 neighboring "nearest pixel" pixel samples, is it also "free"?

? possibly related and reference-able
 * http://research.microsoft.com/en-us/um/people/cloop/loopblinn05.pdf

* can do 4 1d curves, 2 2d curves, a 3d curve and a 1d curve, or a 4d curve

* usage case: particle properties over time
 * could possibly use R,G,B and encode this in A maybe?

* comapre volume texture cubic curve vs not volume texture (c++ opengl)

* Explicitly say that bilinear texture filtering can evaluate the equation of bilin interp (quadratic bezier)

* could sneak in that smoothstep is 0,0,1,1 cubic curve!

=====OTHER=====

! note that you changed the webgl-utils.js to update more requently!

=====DEMO NOTES=====
* chrome disable vsync
 * run with --disable-gpu-vsync
 * https://cesiumjs.org/2014/12/01/WebGL-Profiling-Tips/
 * didn't seem to work?!